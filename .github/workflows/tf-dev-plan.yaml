name: Terraform Dev Plan
on:
  pull_request:
    paths:
      - infra/tf/terraform/**
jobs:
  plan:
    runs-on: ubuntu-latest
    name: "Terragrunt Plan"
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.4
          terraform_wrapper: false
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: 0.31.4
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
          export_default_credentials: true

      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v1.1.3
        with:
          files: |
            infra/tf/terraform/**
      - id: set-matrix
        run: |
          IFS=$'\n'
          x="${{ steps.changed-files-specific.outputs.all_changed_and_modified_files }}"
          echo $x
          for direct in $x
          do
                  dirname=$(dirname -- ${direct})
                  echo "$(basename ${dirname})" >> list
          done
          LIST=$(cat list | uniq)
          echo $LIST
          echo "::set-output name=matrix::$LIST"
      - name: Set yaml for DEV
        run: |
          export list="${{ steps.set-matrix.outputs.matrix }}"
          export SHA="${{ github.sha }}"
          for mod in $list
          do
              yq e '.auto_module_versions[strenv(mod)] |= strenv(SHA)' -i infra/tf/environments/dev.yaml
          done
      - name: commit dev
        uses: EndBug/add-and-commit@v7
        with:
          add: infra/tf/environments/dev.yaml
          author_name: "ci"
          author_email: "ci@gingerninja.co"
          message: "Deploy changes to DEV from ${{ github.sha }}"
      - name: Terragrunt Validate
        id: validate
        run : |
          cd infra/tf/
          echo "Validating"
          TG_ENVIRONMENT=dev terragrunt run-all validate -no-color --terragrunt-working-dir terraform/ --terragrunt-include-external-dependencies --terragrunt-non-interactive
      - name: Terragrunt Plan
        id: plan
        run: |
          cd infra/tf/
          echo "Running plan for $filename"
          TG_ENVIRONMENT=dev terragrunt run-all plan -no-color --terragrunt-working-dir terraform/ --terragrunt-include-external-dependencies --terragrunt-non-interactive
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Validation for ${{ matrix.plans }} ðŸ¤–\`${{ steps.validate.outcome }}\`
            #### Terraform Plan for ${{ matrix.plans }}ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${{ env.PLAN }}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terragrunt Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

